# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from volur.pork.bom.v1alpha1 import bom_pb2 as volur_dot_pork_dot_bom_dot_v1alpha1_dot_bom__pb2


class BomInformationServiceStub(object):
    """Service definition for uploading bom information.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UploadBomInformation = channel.stream_stream(
                '/volur.pork.bom.v1alpha1.BomInformationService/UploadBomInformation',
                request_serializer=volur_dot_pork_dot_bom_dot_v1alpha1_dot_bom__pb2.UploadBomInformationRequest.SerializeToString,
                response_deserializer=volur_dot_pork_dot_bom_dot_v1alpha1_dot_bom__pb2.UploadBomInformationResponse.FromString,
                )


class BomInformationServiceServicer(object):
    """Service definition for uploading bom information.
    """

    def UploadBomInformation(self, request_iterator, context):
        """RPC method for uploading bom information.
        It takes a stream of UploadBomInformationRequest and returns a stream of UploadBomInformationResponse.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BomInformationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UploadBomInformation': grpc.stream_stream_rpc_method_handler(
                    servicer.UploadBomInformation,
                    request_deserializer=volur_dot_pork_dot_bom_dot_v1alpha1_dot_bom__pb2.UploadBomInformationRequest.FromString,
                    response_serializer=volur_dot_pork_dot_bom_dot_v1alpha1_dot_bom__pb2.UploadBomInformationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'volur.pork.bom.v1alpha1.BomInformationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BomInformationService(object):
    """Service definition for uploading bom information.
    """

    @staticmethod
    def UploadBomInformation(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/volur.pork.bom.v1alpha1.BomInformationService/UploadBomInformation',
            volur_dot_pork_dot_bom_dot_v1alpha1_dot_bom__pb2.UploadBomInformationRequest.SerializeToString,
            volur_dot_pork_dot_bom_dot_v1alpha1_dot_bom__pb2.UploadBomInformationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
