# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from volur.pork.product_inventory.v1alpha1 import product_inventory_pb2 as volur_dot_pork_dot_product__inventory_dot_v1alpha1_dot_product__inventory__pb2


class ProductInventoryInformationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UploadProductInventoryInformation = channel.stream_stream(
                '/volur.pork.product_inventory.v1alpha1.ProductInventoryInformationService/UploadProductInventoryInformation',
                request_serializer=volur_dot_pork_dot_product__inventory_dot_v1alpha1_dot_product__inventory__pb2.UploadProductInventoryInformationRequest.SerializeToString,
                response_deserializer=volur_dot_pork_dot_product__inventory_dot_v1alpha1_dot_product__inventory__pb2.UploadProductInventoryInformationResponse.FromString,
                )


class ProductInventoryInformationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def UploadProductInventoryInformation(self, request_iterator, context):
        """UploadProductInventoryInformation allows client to upload a stream of product
        inventory information to the server and receive a stream of responses
        containing the status of each upload. This supports batch processing and
        real-time feedback on the operation.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProductInventoryInformationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UploadProductInventoryInformation': grpc.stream_stream_rpc_method_handler(
                    servicer.UploadProductInventoryInformation,
                    request_deserializer=volur_dot_pork_dot_product__inventory_dot_v1alpha1_dot_product__inventory__pb2.UploadProductInventoryInformationRequest.FromString,
                    response_serializer=volur_dot_pork_dot_product__inventory_dot_v1alpha1_dot_product__inventory__pb2.UploadProductInventoryInformationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'volur.pork.product_inventory.v1alpha1.ProductInventoryInformationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ProductInventoryInformationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def UploadProductInventoryInformation(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/volur.pork.product_inventory.v1alpha1.ProductInventoryInformationService/UploadProductInventoryInformation',
            volur_dot_pork_dot_product__inventory_dot_v1alpha1_dot_product__inventory__pb2.UploadProductInventoryInformationRequest.SerializeToString,
            volur_dot_pork_dot_product__inventory_dot_v1alpha1_dot_product__inventory__pb2.UploadProductInventoryInformationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
